[Parameters]
    # specify the directory with the genomes
    # Folder where all the genomes are saved
    input_folder        =   genomes/

    # Name of the directory where the output data is saved
    name_dir            =   output_data
    database_location   =   databases/

    # path to signalp-4.1: [specified_path_in_config_file]/signalp-4.1/signalp
    # path to signalp-5.0: [specified_path_in_config_file]/signalp-5.0b/bin/signalp
    signalp_path	=   /home/timo/Programs/signalp-4.1/signalp

    # Specify which SignalP version. Type '5' for signalp-5.0 (new) or '4' for signalp-4.1 (older).
    signalp_version	=   4

[Mimpfinder]
    # Motive where te pipeline looks for. In this cases the MIMP motive.
    motive              =   TT[TA]TTGC..CCCACTG..

    # Reverse complentemt of the motive.
    motive_rc           =   ..CAGTGGG..GCAA[TA]AA

    # Must be int. Length of the flanks next to the MIMP motive (or other motive)
    length              =   2500

[MetStop]
    # The minimal probability the signalpeptide sequence has to be.
    probability         =   0.550

    # Minimal length an ORF must have
    min_protein_length	=   26

    # Max length an ORF must have
    max_protein_length	=   300

[Augustus]
    # The minimal probability the signalpeptide sequence has to be.
    probability         =   0.550

    # Minimal length an ORF must have
    min_protein_length	=   26

    # Max length an ORF must have
    max_protein_length	=   300

    # Max basepairs of the effector form the MIMP
    max_distance_mimp	=   2000

[Clustering]
    # Percentage indentity threshold. If sequences have a higher per_ident then they are put into a cluster.
    # If length_thresh is also true.
    pers_ident_thresh    =   60

    # Blast output: '(qend - qstart) / qlen'. If the threshold is smaler then '(qend - qstart) / qlen' the sequences
    # are put into a cluster. If pers_ident_thresh is also true.
    length_thresh        =   0.3

    # The pipeline chooses 1 sequece from the cluster. Longeste takes the longeste sequence of the cluster
    # and concensus makes a concensus sequence.
    longest_or_consensus =   longest

[Presence_absence]
    e_value_thresh       =   0.001
    ident_thresh         =   30
